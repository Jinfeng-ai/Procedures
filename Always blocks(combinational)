practice：使用assign语句和组合的always块构建与门。

// synthesis verilog_input_version verilog_2001
module top_module(
    input a, 
    input b,
    output wire out_assign,
    output reg out_alwaysblock
);
    
    assign out_assign = a & b;
    always @ (*)
        begin
            out_alwaysblock = a & b;
        end

endmodule

//一次成功很开心，哈哈。
//由于数字电路由线与逻辑门组成，因此任何电路都可以表示位模块和分配语句的某种组合。但是，有时这不是最简单的方式。过程（以always为例）
为描述电路提供了另一种语法。

//对应于综合硬件，两种类型的always块是相关的：
组合：always @ (*)
时序：always @(posedge clk)

//组合always块等同于赋值语句，因此总有一种方法可以用两种方式表示组合电路。程序块具有更丰富的语句集（如：if-then,case）。
