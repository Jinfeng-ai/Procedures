# Procedures
过程包括始终，初始，任务和功能块。 过程允许使用顺序语句（不能在过程外部使用）来描述电路的行为。

您的电路具有一个16位输入和四个输出。 构建识别这四个扫描代码并断言正确输出的电路。
为避免创建锁存器，必须在所有可能的情况下为所有输出分配一个值（另请参见always_if2）。
解决此问题的一种简单方法是在case语句之前为输出分配一个“默认值”：

我的代码：
// synthesis verilog_input_version verilog_2001
module top_module (
    input [15:0] scancode,
    output reg left,
    output reg down,
    output reg right,
    output reg up  ); 
    
    always @ (*)begin
        left = 1'b0;down = 1'b0;right = 1'b0;up = 1'b0;
        case (scancode)
             output left  = 2'b00;
             output down  = 2'b01;
             output right = 2'b10;
             output up    = 2'b11;
           
        endcase  
    end   
endmodule


正确代码：
方法一：
// synthesis verilog_input_version verilog_2001
module top_module (
    input [15:0] scancode,
    output reg left,
    output reg down,
    output reg right,
    output reg up  ); 
    
    always @ (*)begin
        left = 1'b0;down = 1'b0;right = 1'b0;up = 1'b0;
        case (scancode)
             16'he06b: left  = 1'b1;
             16'he072: down  = 1'b1;
             16'he074: right = 1'b1;
             16'he075: up    = 1'b1;
            default: ;
        endcase  
    end   
endmodule

方法二：
module top_module (
    input [15:0] scancode,
    output reg left,
    output reg down,
    output reg right,
    output reg up  ); 
    
    always@(*)
        begin
            case(scancode)
                16'he06b: 
                    begin
                        left = 1;
                        down = 0;
                        right = 0;
                        up = 0;
                    end
                16'he072:
                    begin
                        left = 0;
                        down = 1;
                        right = 0;
                        up = 0;
                    end
                16'he074:
                    begin
                        left = 0;
                        down = 0;
                        right = 1;
                        up = 0;
                    end
                16'he075:
                    begin
                        left = 0;
                        down = 0;
                        right = 0;
                        up = 1;
                    end
                default:
                    begin
                        left = 0;
                        down = 0;
                        right = 0;
                        up = 0;
                    end
            endcase
        end

endmodule

总结：
我自己写之前想到过“方法一”的格式，但是只是一闪念，自己就写成那个“鸟”样了；
为什么想到“方法一”的想法呢？见过
“方法二”是自己比较熟悉的方式，但是没有想到。
